const { Graph, RID, inKey, outKey, CLASS, REF, UPSERT } = require('..')
const { expect } = require('chai')
const util = require('util')

describe('graph', async function () {
  it('should accept vertices', async function () {
    const g = new Graph()
    const t = await g.addVertex({a: 1})
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(1)
  })
  it('should link vertices with edges', async function () {
    const g = new Graph()
    const v1 = await g.addVertex({a: 1})
    const v2 = await g.addVertex({b: 2})
    const e = await g.addEdge(v1, v2, 'likes', {c: 3})
    const vs = await g.addVertex({})
      .as('vs')
      .addEdge('is', v1)
      .back('vs')
      .addEdge('is', v2)
      .back('vs')
    expect(await v1[outKey('likes')][0]).to.equal(e[RID])
    expect(await v2[inKey('likes')][0]).to.equal(e[RID])
    expect((await g.v(vs).out('is').has({a: 1}).out('likes').first()).b).to.equal(2)
    expect((await g.v(vs).out('is').has({b: 2}).in('likes').first()).a).to.equal(1)
    expect((await g.v(vs).out('is').has({a: 1}).both('likes').has({b: 2}).first()).b).to.equal(2)
    expect((await g.v(vs).out('is').has({b: 2}).both('likes').has({a: 1}).first()).a).to.equal(1)
  })
  it('should be able to remove edges', async function () {
    const g = new Graph()
    const v1 = await g.addVertex({a: 1})
    const v2 = await g.addVertex({b: 2})
    const e = await g.addEdge(v1, v2, 'likes', {c: 3})
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(2)
    await g.e(e).remove()
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(2)
    expect(Object.keys(g._driver.data.EDGE).length).to.equal(0)
    expect((await g.v(v1).first())[outKey('likes')].length).to.equal(0)
    expect((await g.v(v2).first())[inKey('likes')].length).to.equal(0)
  })
  it('should be able to remove vertices', async function () {
    const g = new Graph()
    const v1 = await g.addVertex({a: 1})
    const v2 = await g.addVertex({b: 2})
    const e = await g.addEdge(v1, v2, 'likes', {c: 3})
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(2)
    await g.v(v1).remove()
    expect(Object.keys(g._driver.data.EDGE).length).to.equal(0)
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(1)
    await g.v(v2).remove()
    expect(Object.keys(g._driver.data.VERTEX).length).to.equal(0)
    expect((await g.v(v1))).to.be.null
    expect((await g.v(v2))).to.be.null
  })
})
